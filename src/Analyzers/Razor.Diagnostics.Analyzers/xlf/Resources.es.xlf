<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="es" original="../Resources.resx">
    <body>
      <trans-unit id="IRemoteJsonServiceParameterDescription">
        <source>Methods in interfaces inheriting from IRemoteJsonService should not have parameters of type RazorPinnedSolutionInfoWrapper or DocumentId as they are not Json serializable.</source>
        <target state="translated">Los métodos de las interfaces que heredan de IRemoteJsonService no deben tener parámetros de tipo RazorPinnedSolutionInfoWrapper o DocumentId, ya que no son serializables en JSON.</target>
        <note />
      </trans-unit>
      <trans-unit id="IRemoteJsonServiceParameterMessage">
        <source>'{0}' parameter in '{1}.{2}' has a parameter of type '{3}' which is not allowed in a Json service</source>
        <target state="translated">El parámetro "{0}" de "{1}.{2}" tiene un parámetro de tipo "{3}" que no se permite en un servicio JSON</target>
        <note />
      </trans-unit>
      <trans-unit id="IRemoteJsonServiceParameterTitle">
        <source>Invalid parameter type in IRemoteJsonService method</source>
        <target state="translated">Tipo de parámetro no válido en el método IRemoteJsonService</target>
        <note />
      </trans-unit>
      <trans-unit id="ImmutableArrayBoxingDescription">
        <source>Calling EnumerableExtensions or ReadOnlyListExtensions methods on ImmutableArray&lt;T&gt; causes the struct to be boxed, which creates unnecessary allocations. Use the corresponding ImmutableArray&lt;T&gt; extension methods instead.</source>
        <target state="translated">Llamar a los métodos EnumerableExtensions o ReadOnlyListExtensions en ImmutableArray&lt;T&gt; hace que se encuadre la estructura, lo que crea asignaciones innecesarias. En su lugar, use los métodos de extensión ImmutableArray&lt;T&gt; correspondientes.</target>
        <note />
      </trans-unit>
      <trans-unit id="ImmutableArrayBoxingMessage">
        <source>Call to '{0}' on ImmutableArray&lt;T&gt; causes boxing. Consider using the ImmutableArray&lt;T&gt; extension method instead.</source>
        <target state="translated">La llamada a "{0}" en ImmutableArray&lt;T&gt; provoca la conversión boxing. Considere la posibilidad de usar el método de extensión ImmutableArray&lt;T&gt; en su lugar.</target>
        <note />
      </trans-unit>
      <trans-unit id="ImmutableArrayBoxingTitle">
        <source>ImmutableArray&lt;T&gt; is being boxed to IReadOnlyList&lt;T&gt;</source>
        <target state="translated">ImmutableArray&lt;T&gt; se está convirtiendo en boxing a IReadOnlyList&lt;T&gt;</target>
        <note />
      </trans-unit>
      <trans-unit id="PooledArrayBuilderAsRefDescription">
        <source>Instance of PooledArrayBuilder&lt;T&gt;.AsRef() must be a 'using' variable.</source>
        <target state="translated">La instancia de PooledArrayBuilder&lt;T&gt;.AsRef() debe ser una variable "using".</target>
        <note>An optional longer localizable description of the diagnostic.</note>
      </trans-unit>
      <trans-unit id="PooledArrayBuilderAsRefMessage">
        <source>Instance of PooledArrayBuilder&lt;T&gt;.AsRef() must be a 'using' variable</source>
        <target state="translated">La instancia de PooledArrayBuilder&lt;T&gt;.AsRef() debe ser una variable "using"</target>
        <note>The format-able message the diagnostic displays.</note>
      </trans-unit>
      <trans-unit id="PooledArrayBuilderAsRefTitle">
        <source>Instance of PooledArrayBuilder&lt;T&gt;.AsRef() must be a 'using' variable</source>
        <target state="translated">La instancia de PooledArrayBuilder&lt;T&gt;.AsRef() debe ser una variable "using"</target>
        <note>The title of the diagnostic.</note>
      </trans-unit>
    </body>
  </file>
</xliff>