<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ja" original="../Resources.resx">
    <body>
      <trans-unit id="IRemoteJsonServiceParameterDescription">
        <source>Methods in interfaces inheriting from IRemoteJsonService should not have parameters of type RazorPinnedSolutionInfoWrapper or DocumentId as they are not Json serializable.</source>
        <target state="translated">IRemoteJsonService から継承するインターフェイス内のメソッドは、Json シリアル化できないため、RazorPinnedSolutionInfoWrapper または DocumentId 型のパラメーターを持つべきではありません。</target>
        <note />
      </trans-unit>
      <trans-unit id="IRemoteJsonServiceParameterMessage">
        <source>'{0}' parameter in '{1}.{2}' has a parameter of type '{3}' which is not allowed in a Json service</source>
        <target state="translated">'{1}.{2}' の '{0}' パラメーターには型 '{3}' のパラメーターがあり、Json サービスでは使用できません</target>
        <note />
      </trans-unit>
      <trans-unit id="IRemoteJsonServiceParameterTitle">
        <source>Invalid parameter type in IRemoteJsonService method</source>
        <target state="translated">IRemoteJsonService メソッドのパラメーターの型が無効です</target>
        <note />
      </trans-unit>
      <trans-unit id="ImmutableArrayBoxingDescription">
        <source>Calling EnumerableExtensions or ReadOnlyListExtensions methods on ImmutableArray&lt;T&gt; causes the struct to be boxed, which creates unnecessary allocations. Use the corresponding ImmutableArray&lt;T&gt; extension methods instead.</source>
        <target state="translated">ImmutableArray&lt;T&gt; で EnumerableExtensions メソッドまたは ReadOnlyListExtensions メソッドを呼び出すと、構造体がボックス化され、不要な割り当てが作成されます。代わりに、対応する ImmutableArray&lt;T&gt; 拡張メソッドを使用してください。</target>
        <note />
      </trans-unit>
      <trans-unit id="ImmutableArrayBoxingMessage">
        <source>Call to '{0}' on ImmutableArray&lt;T&gt; causes boxing. Consider using the ImmutableArray&lt;T&gt; extension method instead.</source>
        <target state="translated">ImmutableArray&lt;T&gt; に対する '{0}' の呼び出しはボックス化を引き起こします。代わりに ImmutableArray&lt;T&gt; 拡張メソッドを使用することを検討してください。</target>
        <note />
      </trans-unit>
      <trans-unit id="ImmutableArrayBoxingTitle">
        <source>ImmutableArray&lt;T&gt; is being boxed to IReadOnlyList&lt;T&gt;</source>
        <target state="translated">ImmutableArray&lt;T&gt; は IReadOnlyList&lt;T&gt; にボックス化されています</target>
        <note />
      </trans-unit>
      <trans-unit id="PooledArrayBuilderAsRefDescription">
        <source>Instance of PooledArrayBuilder&lt;T&gt;.AsRef() must be a 'using' variable.</source>
        <target state="translated">PooledArrayBuilder&lt;T&gt;.AsRef() のインスタンスは 'using' 変数でなければなりません。</target>
        <note>An optional longer localizable description of the diagnostic.</note>
      </trans-unit>
      <trans-unit id="PooledArrayBuilderAsRefMessage">
        <source>Instance of PooledArrayBuilder&lt;T&gt;.AsRef() must be a 'using' variable</source>
        <target state="translated">PooledArrayBuilder&lt;T&gt;.AsRef() のインスタンスは 'using' 変数でなければなりません</target>
        <note>The format-able message the diagnostic displays.</note>
      </trans-unit>
      <trans-unit id="PooledArrayBuilderAsRefTitle">
        <source>Instance of PooledArrayBuilder&lt;T&gt;.AsRef() must be a 'using' variable</source>
        <target state="translated">PooledArrayBuilder&lt;T&gt;.AsRef() のインスタンスは 'using' 変数でなければなりません</target>
        <note>The title of the diagnostic.</note>
      </trans-unit>
    </body>
  </file>
</xliff>