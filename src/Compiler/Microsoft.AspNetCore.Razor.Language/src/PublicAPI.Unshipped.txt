#nullable enable
*REMOVED*Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilderExtensions
*REMOVED*~Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
*REMOVED*~Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
*REMOVED*~Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.AllowedChildTags.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor>
*REMOVED*~Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.BoundAttributes.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor>
*REMOVED*~Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
*REMOVED*~Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.TagMatchingRules.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor>
*REMOVED*~Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor.Attributes.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor>
*REMOVED*~virtual Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.BoundAttributeParameters.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor>
abstract Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext.AddSourceMappingFor(Microsoft.AspNetCore.Razor.Language.SourceSpan node) -> void
abstract Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext.Dispose() -> void
abstract Microsoft.AspNetCore.Razor.Language.MetadataCollection.ContainsKey(string! key) -> bool
abstract Microsoft.AspNetCore.Razor.Language.MetadataCollection.Count.get -> int
abstract Microsoft.AspNetCore.Razor.Language.MetadataCollection.GetEntry(int index) -> System.Collections.Generic.KeyValuePair<string!, string?>
abstract Microsoft.AspNetCore.Razor.Language.MetadataCollection.Keys.get -> System.Collections.Generic.IEnumerable<string!>!
abstract Microsoft.AspNetCore.Razor.Language.MetadataCollection.this[string! key].get -> string?
abstract Microsoft.AspNetCore.Razor.Language.MetadataCollection.TryGetValue(string! key, out string? value) -> bool
abstract Microsoft.AspNetCore.Razor.Language.MetadataCollection.Values.get -> System.Collections.Generic.IEnumerable<string?>!
abstract Microsoft.AspNetCore.Razor.Language.RazorSourceDocumentProperties.FilePath.get -> string?
abstract Microsoft.AspNetCore.Razor.Language.RazorSourceDocumentProperties.RelativePath.get -> string?
abstract Microsoft.AspNetCore.Razor.Language.TagHelperCollector<T>.Collect(Microsoft.CodeAnalysis.ISymbol! symbol, System.Collections.Generic.ICollection<Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor!>! results) -> void
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor.DisplayName.get -> string!
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor.Name.get -> string!
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder.DisplayName.get -> string?
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder.DisplayName.set -> void
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder.Name.get -> string?
Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder.Name.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.CaseSensitive.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.DisplayName.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.Documentation.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.GetAllDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!>!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.HasIndexer.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IndexerNamePrefix.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IndexerTypeName.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IsBooleanProperty.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IsDirectiveAttribute.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IsEnum.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IsIndexerBooleanProperty.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IsIndexerStringProperty.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.IsStringProperty.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.Kind.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.Metadata.get -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.Name.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.Parameters.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor!>
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.TypeName.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.BindAttributeParameter(System.Action<Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder!>! configure) -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.DisplayName.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.DisplayName.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.Documentation.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.Documentation.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IndexerAttributeNamePrefix.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IndexerAttributeNamePrefix.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IndexerValueTypeName.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IndexerValueTypeName.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IsDictionary.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IsDictionary.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IsEnum.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.IsEnum.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.Metadata.get -> System.Collections.Generic.IDictionary<string!, string?>!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.Name.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.Name.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.SetMetadata(Microsoft.AspNetCore.Razor.Language.MetadataCollection! metadata) -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.TryGetMetadataValue(string! key, out string? value) -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.TypeName.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder.TypeName.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.CaseSensitive.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.DisplayName.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.Documentation.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.IsBooleanProperty.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.IsEnum.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.IsStringProperty.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.Kind.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.Metadata.get -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.Name.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.TypeName.get -> string!
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.DisplayName.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.DisplayName.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.Documentation.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.Documentation.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.IsEnum.get -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.IsEnum.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.Metadata.get -> System.Collections.Generic.IDictionary<string!, string?>!
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.Name.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.Name.set -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.SetMetadata(Microsoft.AspNetCore.Razor.Language.MetadataCollection! metadata) -> void
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.TryGetMetadataValue(string! key, out string? value) -> bool
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.TypeName.get -> string?
Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptorBuilder.TypeName.set -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.CodeWriter(string! newLine, Microsoft.AspNetCore.Razor.Language.RazorCodeGenerationOptions! options) -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.GenerateCode() -> string!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.Indent(int size) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.LastChar.get -> char?
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.NewLine.get -> string!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.NewLine.set -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.Write(ref Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler handler) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.Write(string! value) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.Write(string! value, int startIndex, int count) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.Write(System.ReadOnlyMemory<char> value) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler.AppendFormatted(string? value) -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler.AppendFormatted(System.ReadOnlyMemory<char> value) -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler.AppendFormatted<T>(T value) -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler.AppendLiteral(string! value) -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler.WriteInterpolatedStringHandler() -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler.WriteInterpolatedStringHandler(int literalLength, int formattedCount, Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter! writer) -> void
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteLine() -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteLine(ref Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteInterpolatedStringHandler handler) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteLine(string! value) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter.WriteLine(System.ReadOnlyMemory<char> value) -> Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeWriter!
Microsoft.AspNetCore.Razor.Language.CodeGeneration.LinePragma.LinePragma() -> void
Microsoft.AspNetCore.Razor.Language.CommonMetadata
Microsoft.AspNetCore.Razor.Language.DirectiveTokenKind.IdentifierOrExpression = 7 -> Microsoft.AspNetCore.Razor.Language.DirectiveTokenKind
Microsoft.AspNetCore.Razor.Language.Intermediate.FormNameIntermediateNode
Microsoft.AspNetCore.Razor.Language.Intermediate.FormNameIntermediateNode.FormNameIntermediateNode() -> void
Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeCollection.Enumerator.Enumerator() -> void
Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeReference.IntermediateNodeReference() -> void
Microsoft.AspNetCore.Razor.Language.Intermediate.RenderModeIntermediateNode
Microsoft.AspNetCore.Razor.Language.Intermediate.RenderModeIntermediateNode.RenderModeIntermediateNode() -> void
Microsoft.AspNetCore.Razor.Language.Intermediate.TypeParameter.ConstraintsSource.get -> Microsoft.AspNetCore.Razor.Language.SourceSpan?
Microsoft.AspNetCore.Razor.Language.Intermediate.TypeParameter.ConstraintsSource.init -> void
Microsoft.AspNetCore.Razor.Language.Intermediate.TypeParameter.ParameterNameSource.get -> Microsoft.AspNetCore.Razor.Language.SourceSpan?
Microsoft.AspNetCore.Razor.Language.Intermediate.TypeParameter.ParameterNameSource.init -> void
Microsoft.AspNetCore.Razor.Language.ITagHelperDescriptorProvider
Microsoft.AspNetCore.Razor.Language.ITagHelperDescriptorProvider.Execute(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorProviderContext! context) -> void
Microsoft.AspNetCore.Razor.Language.ITagHelperDescriptorProvider.Order.get -> int
Microsoft.AspNetCore.Razor.Language.MetadataCollection
Microsoft.AspNetCore.Razor.Language.MetadataCollection.Contains(string! key, string? value) -> bool
Microsoft.AspNetCore.Razor.Language.MetadataCollection.Enumerator
Microsoft.AspNetCore.Razor.Language.MetadataCollection.Enumerator.Current.get -> System.Collections.Generic.KeyValuePair<string!, string?>
Microsoft.AspNetCore.Razor.Language.MetadataCollection.Enumerator.Enumerator() -> void
Microsoft.AspNetCore.Razor.Language.MetadataCollection.Enumerator.MoveNext() -> bool
Microsoft.AspNetCore.Razor.Language.MetadataCollection.Enumerator.Reset() -> void
Microsoft.AspNetCore.Razor.Language.MetadataCollection.Equals(Microsoft.AspNetCore.Razor.Language.MetadataCollection? other) -> bool
Microsoft.AspNetCore.Razor.Language.MetadataCollection.GetEnumerator() -> Microsoft.AspNetCore.Razor.Language.MetadataCollection.Enumerator
Microsoft.AspNetCore.Razor.Language.MetadataCollection.MetadataCollection() -> void
Microsoft.AspNetCore.Razor.Language.RazorCodeDocument
Microsoft.AspNetCore.Razor.Language.RazorCodeDocument.Imports.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!>
Microsoft.AspNetCore.Razor.Language.RazorCodeDocument.Items.get -> Microsoft.AspNetCore.Razor.Language.ItemCollection!
Microsoft.AspNetCore.Razor.Language.RazorCodeDocument.Source.get -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Equals(Microsoft.AspNetCore.Razor.Language.RazorDiagnostic? other) -> bool
Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.GetMessage() -> string!
Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.GetMessage(System.IFormatProvider? formatProvider) -> string!
Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Id.get -> string!
Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Severity.get -> Microsoft.AspNetCore.Razor.Language.RazorDiagnosticSeverity
Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Span.get -> Microsoft.AspNetCore.Razor.Language.SourceSpan
Microsoft.AspNetCore.Razor.Language.RazorDiagnosticCollection.Enumerator.Enumerator() -> void
Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.GetFilePathForDisplay() -> string?
Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.FilePath.get -> string?
Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.RelativePath.get -> string?
Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor
Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor.Id.get -> string!
Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor.MessageFormat.get -> string!
Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor.RazorDiagnosticDescriptor(string! id, string! messageFormat, Microsoft.AspNetCore.Razor.Language.RazorDiagnosticSeverity severity) -> void
Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor.Severity.get -> Microsoft.AspNetCore.Razor.Language.RazorDiagnosticSeverity
Microsoft.AspNetCore.Razor.Language.RazorEngine
Microsoft.AspNetCore.Razor.Language.RazorEngine.Features.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.IRazorEngineFeature!>
Microsoft.AspNetCore.Razor.Language.RazorEngine.Phases.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.IRazorEnginePhase!>
Microsoft.AspNetCore.Razor.Language.RazorEngine.Process(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument! document) -> void
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Configuration.get -> Microsoft.AspNetCore.Razor.Language.RazorConfiguration!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Engine.get -> Microsoft.AspNetCore.Razor.Language.RazorEngine!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.EngineFeatures.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.IRazorEngineFeature!>
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.FileSystem.get -> Microsoft.AspNetCore.Razor.Language.RazorProjectFileSystem!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Phases.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.IRazorEnginePhase!>
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(Microsoft.AspNetCore.Razor.Language.RazorProjectItem! projectItem) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(Microsoft.AspNetCore.Razor.Language.RazorSourceDocument! source, string! fileKind, System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!> importSources, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor!>! tagHelpers) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProcessDeclarationOnly(Microsoft.AspNetCore.Razor.Language.RazorProjectItem! projectItem) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProcessDeclarationOnly(Microsoft.AspNetCore.Razor.Language.RazorSourceDocument! source, string! fileKind, System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!> importSources, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor!>! tagHelpers) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProcessDesignTime(Microsoft.AspNetCore.Razor.Language.RazorProjectItem! projectItem) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProcessDesignTime(Microsoft.AspNetCore.Razor.Language.RazorSourceDocument! source, string? fileKind, System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!> importSources, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor!>? tagHelpers) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.ProjectFeatures.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.IRazorProjectEngineFeature!>
Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder
Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder.Build() -> Microsoft.AspNetCore.Razor.Language.RazorProjectEngine!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder.Configuration.get -> Microsoft.AspNetCore.Razor.Language.RazorConfiguration!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder.Features.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.IRazorFeature!>.Builder!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder.FileSystem.get -> Microsoft.AspNetCore.Razor.Language.RazorProjectFileSystem!
Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder.Phases.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.IRazorEnginePhase!>.Builder!
Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.Text.get -> Microsoft.CodeAnalysis.Text.SourceText!
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.CaseSensitive.get -> bool
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.DisplayName.get -> string!
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.Metadata.get -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.Name.get -> string!
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparison.get -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparisonMode.FullMatch = 0 -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparisonMode.PrefixMatch = 1 -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.Value.get -> string?
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparison.get -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode.FullMatch = 1 -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode.None = 0 -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode.PrefixMatch = 2 -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode.SuffixMatch = 3 -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.Metadata.get -> System.Collections.Generic.IDictionary<string!, string?>!
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.Name.get -> string?
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.Name.set -> void
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.NameComparisonMode.get -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.NameComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.NameComparisonMode.set -> void
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.SetMetadata(Microsoft.AspNetCore.Razor.Language.MetadataCollection! metadata) -> void
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.TryGetMetadataValue(string! key, out string? value) -> bool
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.Value.get -> string?
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.Value.set -> void
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.ValueComparisonMode.get -> Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ValueComparisonMode
Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder.ValueComparisonMode.set -> void
Microsoft.AspNetCore.Razor.Language.SourceLocation.SourceLocation() -> void
Microsoft.AspNetCore.Razor.Language.SourceSpan.SourceSpan() -> void
Microsoft.AspNetCore.Razor.Language.TagHelperCollector<T>
Microsoft.AspNetCore.Razor.Language.TagHelperCollector<T>.Collect(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorProviderContext! context) -> void
Microsoft.AspNetCore.Razor.Language.TagHelperCollector<T>.TagHelperCollector(Microsoft.CodeAnalysis.Compilation! compilation, Microsoft.CodeAnalysis.ISymbol? targetSymbol) -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.AllowedChildTags.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor!>
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.AssemblyName.get -> string!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.BoundAttributes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor!>
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.CaseSensitive.get -> bool
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.DisplayName.get -> string!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.Documentation.get -> string?
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.GetAllDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!>!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.Kind.get -> string!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.Metadata.get -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.Name.get -> string!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.TagMatchingRules.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor!>
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.TagOutputHint.get -> string?
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.AllowChildTag(System.Action<Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder!>! configure) -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.AllowedChildTags.get -> Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor!, Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptorBuilder!>!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.AssemblyName.get -> string!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.BindAttribute(System.Action<Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder!>! configure) -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.BoundAttributes.get -> Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor!, Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder!>!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.CaseSensitive.get -> bool
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.CaseSensitive.set -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.DisplayName.get -> string?
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.DisplayName.set -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.Documentation.get -> string?
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.Documentation.set -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.Kind.get -> string!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.Metadata.get -> System.Collections.Generic.IDictionary<string!, string?>!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.Name.get -> string!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.PooledBuilder
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.PooledBuilder.Dispose() -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.PooledBuilder.PooledBuilder() -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.SetMetadata(Microsoft.AspNetCore.Razor.Language.MetadataCollection! metadata) -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.TagMatchingRule(System.Action<Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder!>! configure) -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.TagMatchingRules.get -> Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor!, Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder!>!
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.TagOutputHint.get -> string?
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.TagOutputHint.set -> void
Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.TryGetMetadataValue(string! key, out string? value) -> bool
Microsoft.AspNetCore.Razor.Language.TagHelperObject<T>
Microsoft.AspNetCore.Razor.Language.TagHelperObject<T>.Diagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!>
Microsoft.AspNetCore.Razor.Language.TagHelperObject<T>.Equals(T? other) -> bool
Microsoft.AspNetCore.Razor.Language.TagHelperObject<T>.HasErrors.get -> bool
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilder<T>
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilder<T>.Build() -> T!
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilder<T>.Diagnostics.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!>.Builder!
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.Count.get -> int
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.Enumerator
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.Enumerator.Current.get -> TBuilder!
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.Enumerator.Enumerator() -> void
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.Enumerator.MoveNext() -> bool
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.Enumerator.Reset() -> void
Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.this[int index].get -> TBuilder!
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor.Attributes.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor!>
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor.CaseSensitive.get -> bool
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor.GetAllDiagnostics() -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!>!
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor.ParentTag.get -> string?
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor.TagName.get -> string!
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptor.TagStructure.get -> Microsoft.AspNetCore.Razor.Language.TagStructure
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.Attribute(System.Action<Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder!>! configure) -> void
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.Attributes.get -> Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor!, Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptorBuilder!>!
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.ParentTag.get -> string?
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.ParentTag.set -> void
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.TagName.get -> string?
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.TagName.set -> void
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.TagStructure.get -> Microsoft.AspNetCore.Razor.Language.TagStructure
Microsoft.AspNetCore.Razor.Language.TagMatchingRuleDescriptorBuilder.TagStructure.set -> void
override Microsoft.AspNetCore.Razor.Language.AllowedChildTagDescriptor.ToString() -> string!
override Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor.ToString() -> string!
override Microsoft.AspNetCore.Razor.Language.BoundAttributeParameterDescriptor.ToString() -> string!
override Microsoft.AspNetCore.Razor.Language.Intermediate.FormNameIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor! visitor) -> void
override Microsoft.AspNetCore.Razor.Language.Intermediate.FormNameIntermediateNode.Children.get -> Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeCollection!
override Microsoft.AspNetCore.Razor.Language.Intermediate.FormNameIntermediateNode.FormatNode(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeFormatter! formatter) -> void
override Microsoft.AspNetCore.Razor.Language.Intermediate.RenderModeIntermediateNode.Accept(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor! visitor) -> void
override Microsoft.AspNetCore.Razor.Language.Intermediate.RenderModeIntermediateNode.Children.get -> Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeCollection!
override Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Equals(object? obj) -> bool
override Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.GetHashCode() -> int
override Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.ToString() -> string!
override Microsoft.AspNetCore.Razor.Language.RequiredAttributeDescriptor.ToString() -> string!
override Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor.ToString() -> string!
override sealed Microsoft.AspNetCore.Razor.Language.MetadataCollection.Equals(object? obj) -> bool
override sealed Microsoft.AspNetCore.Razor.Language.MetadataCollection.GetHashCode() -> int
override sealed Microsoft.AspNetCore.Razor.Language.TagHelperObject<T>.Equals(object? obj) -> bool
override sealed Microsoft.AspNetCore.Razor.Language.TagHelperObject<T>.GetHashCode() -> int
static Microsoft.AspNetCore.Razor.Language.CommonMetadata.PropertyName(string! value) -> System.Collections.Generic.KeyValuePair<string!, string?>
static Microsoft.AspNetCore.Razor.Language.CommonMetadata.TypeName(string! value) -> System.Collections.Generic.KeyValuePair<string!, string?>
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.Create(params System.Collections.Generic.KeyValuePair<string!, string?>[]! pairs) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.Create(System.Collections.Generic.Dictionary<string!, string?>! map) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.Create(System.Collections.Generic.IReadOnlyDictionary<string!, string?>! map) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.Create(System.Collections.Generic.KeyValuePair<string!, string?> pair) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.Create(System.Collections.Generic.KeyValuePair<string!, string?> pair1, System.Collections.Generic.KeyValuePair<string!, string?> pair2) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.Create(System.Collections.Generic.KeyValuePair<string!, string?> pair1, System.Collections.Generic.KeyValuePair<string!, string?> pair2, System.Collections.Generic.KeyValuePair<string!, string?> pair3) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.Create<T>(T pairs) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.CreateOrEmpty(System.Collections.Generic.Dictionary<string!, string?>? map) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.CreateOrEmpty(System.Collections.Generic.IReadOnlyDictionary<string!, string?>? map) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.MetadataCollection.CreateOrEmpty<T>(T? pairs) -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
static Microsoft.AspNetCore.Razor.Language.RazorCodeDocument.Create(Microsoft.AspNetCore.Razor.Language.RazorSourceDocument! source) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
static Microsoft.AspNetCore.Razor.Language.RazorCodeDocument.Create(Microsoft.AspNetCore.Razor.Language.RazorSourceDocument! source, System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!> imports) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
static Microsoft.AspNetCore.Razor.Language.RazorCodeDocument.Create(Microsoft.AspNetCore.Razor.Language.RazorSourceDocument! source, System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!> imports, Microsoft.AspNetCore.Razor.Language.RazorParserOptions! parserOptions, Microsoft.AspNetCore.Razor.Language.RazorCodeGenerationOptions! codeGenerationOptions) -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument!
static Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.TryComputeClassName(this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument! codeDocument, out string? className) -> bool
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.Create(Microsoft.CodeAnalysis.Text.SourceText! text, Microsoft.AspNetCore.Razor.Language.RazorSourceDocumentProperties! properties) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.Create(string! content, Microsoft.AspNetCore.Razor.Language.RazorSourceDocumentProperties! properties) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.Create(string! content, string! fileName) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.Create(string! content, string! fileName, System.Text.Encoding! encoding) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.Create(string! content, System.Text.Encoding! encoding, Microsoft.AspNetCore.Razor.Language.RazorSourceDocumentProperties! properties) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.ReadFrom(Microsoft.AspNetCore.Razor.Language.RazorProjectItem! projectItem) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.ReadFrom(System.IO.Stream! stream, string! fileName) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.ReadFrom(System.IO.Stream! stream, string! fileName, System.Text.Encoding! encoding) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorSourceDocument.ReadFrom(System.IO.Stream! stream, System.Text.Encoding! encoding, Microsoft.AspNetCore.Razor.Language.RazorSourceDocumentProperties! properties) -> Microsoft.AspNetCore.Razor.Language.RazorSourceDocument!
static Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Create(Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor! descriptor) -> Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!
static Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Create(Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor! descriptor, Microsoft.AspNetCore.Razor.Language.SourceSpan? span) -> Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!
static Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Create(Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor! descriptor, Microsoft.AspNetCore.Razor.Language.SourceSpan? span, params object![]! args) -> Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!
static Microsoft.AspNetCore.Razor.Language.RazorDiagnostic.Create(Microsoft.AspNetCore.Razor.Language.RazorDiagnosticDescriptor! descriptor, params object![]! args) -> Microsoft.AspNetCore.Razor.Language.RazorDiagnostic!
static Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Create(Microsoft.AspNetCore.Razor.Language.RazorConfiguration! configuration, Microsoft.AspNetCore.Razor.Language.RazorProjectFileSystem! fileSystem) -> Microsoft.AspNetCore.Razor.Language.RazorProjectEngine!
static Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Create(Microsoft.AspNetCore.Razor.Language.RazorConfiguration! configuration, Microsoft.AspNetCore.Razor.Language.RazorProjectFileSystem! fileSystem, System.Action<Microsoft.AspNetCore.Razor.Language.RazorProjectEngineBuilder!>? configure) -> Microsoft.AspNetCore.Razor.Language.RazorProjectEngine!
static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.Create(string! kind, string! name, string! assemblyName) -> Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder!
static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.Create(string! name, string! assemblyName) -> Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder!
static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.GetPooledInstance(string! kind, string! name, string! assemblyName, out Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder! builder) -> Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.PooledBuilder
static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.GetPooledInstance(string! name, string! assemblyName, out Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder! builder) -> Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder.PooledBuilder
static readonly Microsoft.AspNetCore.Razor.Language.MetadataCollection.Empty -> Microsoft.AspNetCore.Razor.Language.MetadataCollection!
~abstract Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument.CodeDocument.get -> Microsoft.AspNetCore.Razor.Language.RazorCodeDocument
~abstract Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument.SourceMappings.get -> System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.SourceMapping>
~Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.GetEnumerator() -> Microsoft.AspNetCore.Razor.Language.TagHelperObjectBuilderCollection<TObject, TBuilder>.Enumerator
~Microsoft.AspNetCore.Razor.Language.SourceLocation.SourceLocation(string filePath, int absoluteIndex, Microsoft.CodeAnalysis.Text.LinePosition linePosition) -> void
~static Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions.SetMetadata(this Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder builder, System.Collections.Generic.KeyValuePair<string, string> pair) -> void
~static Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions.GetGloballyQualifiedTypeName(this Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor attribute) -> string
~static Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddIdentifierOrExpression(this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder, string name, string description) -> Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder
~static Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions.IsDesignTimePropertyAccessHelper(this Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode tagHelper) -> bool
~static Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetPreTagHelperSyntaxTree(this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document) -> Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree
~static Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetPreTagHelperSyntaxTree(this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree syntaxTree) -> void
~static Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument.Create(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument codeDocument, string generatedCode, Microsoft.AspNetCore.Razor.Language.RazorCodeGenerationOptions options, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic> diagnostics) -> Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument
~static Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument.Create(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument codeDocument, string generatedCode, Microsoft.AspNetCore.Razor.Language.RazorCodeGenerationOptions options, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic> diagnostics, System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.SourceMapping> sourceMappings, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.CodeGeneration.LinePragma> linePragmas) -> Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument
~static Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument.Create(string generatedCode, Microsoft.AspNetCore.Razor.Language.RazorCodeGenerationOptions options, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.RazorDiagnostic> diagnostics, System.Collections.Immutable.ImmutableArray<Microsoft.AspNetCore.Razor.Language.SourceMapping> sourceMappings, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Language.CodeGeneration.LinePragma> linePragmas) -> Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument
~static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.SetMetadata(this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder, System.Collections.Generic.KeyValuePair<string, string> pair) -> void
~static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.SetMetadata(this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder, System.Collections.Generic.KeyValuePair<string, string> pair1, System.Collections.Generic.KeyValuePair<string, string> pair2) -> void
~static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.SetTypeNameIdentifier(this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder, string typeNameIdentifier) -> void
~static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.SetTypeNamespace(this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder, string typeNamespace) -> void
~static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.GetTypeNameIdentifier(this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper) -> string
~static Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.GetTypeNamespace(this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper) -> string
~static readonly Microsoft.AspNetCore.Razor.Language.Intermediate.CommonAnnotations.NullableContext -> object
~static readonly Microsoft.AspNetCore.Razor.Language.RazorLanguageVersion.Version_7_0 -> Microsoft.AspNetCore.Razor.Language.RazorLanguageVersion
~static readonly Microsoft.AspNetCore.Razor.Language.RazorLanguageVersion.Version_8_0 -> Microsoft.AspNetCore.Razor.Language.RazorLanguageVersion
~static readonly Microsoft.AspNetCore.Razor.Language.TagHelperMetadata.Common.GloballyQualifiedTypeName -> string
~static readonly Microsoft.AspNetCore.Razor.Language.TagHelperMetadata.Common.TypeNameIdentifier -> string
~static readonly Microsoft.AspNetCore.Razor.Language.TagHelperMetadata.Common.TypeNamespace -> string
~virtual Microsoft.AspNetCore.Razor.Language.CodeGeneration.IntermediateNodeWriter.WriteFormName(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext context, Microsoft.AspNetCore.Razor.Language.Intermediate.FormNameIntermediateNode node) -> void
~virtual Microsoft.AspNetCore.Razor.Language.CodeGeneration.IntermediateNodeWriter.WriteRenderMode(Microsoft.AspNetCore.Razor.Language.CodeGeneration.CodeRenderingContext context, Microsoft.AspNetCore.Razor.Language.Intermediate.RenderModeIntermediateNode node) -> void
~virtual Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.VisitFormName(Microsoft.AspNetCore.Razor.Language.Intermediate.FormNameIntermediateNode node) -> void
~virtual Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeVisitor.VisitRenderMode(Microsoft.AspNetCore.Razor.Language.Intermediate.RenderModeIntermediateNode node) -> void
