<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttributeDirective_AttributeToken_Description" xml:space="preserve">
    <value>The C# attribute that will be applied to the current class.</value>
  </data>
  <data name="AttributeDirective_AttributeToken_Name" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="AttributeDirective_Description" xml:space="preserve">
    <value>Specifies the C# attribute that will be applied to the current class.</value>
  </data>
  <data name="BindTagHelper_Component_Documentation" xml:space="preserve">
    <value>Binds the provided expression to the '{0}' property and a change event delegate to the '{1}' property of the component.</value>
  </data>
  <data name="BindTagHelper_Element_After_Documentation" xml:space="preserve">
    <value>Specifies an action to run after the new value has been set.</value>
  </data>
  <data name="BindTagHelper_Element_Culture_Documentation" xml:space="preserve">
    <value>Specifies the culture to use for conversions.</value>
  </data>
  <data name="BindTagHelper_Element_Documentation" xml:space="preserve">
    <value>Binds the provided expression to the '{0}' attribute and a change event delegate to the '{1}' attribute.</value>
  </data>
  <data name="BindTagHelper_Element_Event_Documentation" xml:space="preserve">
    <value>Specifies the event handler name to attach for change notifications for the value provided by the '{0}' attribute.</value>
  </data>
  <data name="BindTagHelper_Element_Format_Documentation" xml:space="preserve">
    <value>Specifies a format to convert the value specified by the '{0}' attribute. The format string can currently only be used with expressions of type &lt;code&gt;DateTime&lt;/code&gt;.</value>
  </data>
  <data name="BindTagHelper_Element_Get_Documentation" xml:space="preserve">
    <value>Specifies the expression to use for binding the value to the attribute.</value>
  </data>
  <data name="BindTagHelper_Element_Set_Documentation" xml:space="preserve">
    <value>Specifies the expression to use for updating the bound value when a new value is available.</value>
  </data>
  <data name="BindTagHelper_Fallback_Documentation" xml:space="preserve">
    <value>Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: &lt;code&gt;@bind-value="..."&lt;/code&gt; and &lt;code&gt;@bind-value:event="onchange"&lt;/code&gt; will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.</value>
  </data>
  <data name="BindTagHelper_Fallback_Event_Documentation" xml:space="preserve">
    <value>Specifies the event handler name to attach for change notifications for the value provided by the '{0}' attribute.</value>
  </data>
  <data name="BindTagHelper_Fallback_Format_Documentation" xml:space="preserve">
    <value>Specifies a format to convert the value specified by the corresponding bind attribute. For example: &lt;code&gt;@bind-value:format="..."&lt;/code&gt; will apply a format string to the value specified in &lt;code&gt;@bind-value="..."&lt;/code&gt;. The format string can currently only be used with expressions of type &lt;code&gt;DateTime&lt;/code&gt;.</value>
  </data>
  <data name="ChildContentParameterName_Documentation" xml:space="preserve">
    <value>Specifies the parameter name for the '{0}' child content expression.</value>
  </data>
  <data name="ChildContentParameterName_TopLevelDocumentation" xml:space="preserve">
    <value>Specifies the parameter name for all child content expressions.</value>
  </data>
  <data name="ComponentTypeParameter_Documentation" xml:space="preserve">
    <value>Specifies the type of the type parameter {0} for the {1} component.</value>
  </data>
  <data name="EventHandlerTagHelper_Documentation" xml:space="preserve">
    <value>Sets the '{0}' attribute to the provided string or delegate value. A delegate value should be of type '{1}'.</value>
  </data>
  <data name="EventHandlerTagHelper_PreventDefault_Documentation" xml:space="preserve">
    <value>Specifies whether to cancel (if cancelable) the default action that belongs to the '{0}' event.</value>
  </data>
  <data name="EventHandlerTagHelper_StopPropagation_Documentation" xml:space="preserve">
    <value>Specifies whether to prevent further propagation of the '{0}' event in the capturing and bubbling phases.</value>
  </data>
  <data name="FormNameTagHelper_Documentation" xml:space="preserve">
    <value>Name used to match the form handler on the server.</value>
  </data>
  <data name="ImplementsDirective_Description" xml:space="preserve">
    <value>Declares an interface implementation for the current class.</value>
  </data>
  <data name="ImplementsDirective_TypeToken_Description" xml:space="preserve">
    <value>The interface type implemented by the current class.</value>
  </data>
  <data name="ImplementsDirective_TypeToken_Name" xml:space="preserve">
    <value>TypeName</value>
  </data>
  <data name="KeyTagHelper_Documentation" xml:space="preserve">
    <value>Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.</value>
  </data>
  <data name="LayoutDirective_Description" xml:space="preserve">
    <value>Declares a layout type for the current document.</value>
  </data>
  <data name="LayoutDirective_TypeToken_Description" xml:space="preserve">
    <value>The interface type implemented by the current document.</value>
  </data>
  <data name="LayoutDirective_TypeToken_Name" xml:space="preserve">
    <value>TypeName</value>
  </data>
  <data name="PageDirectiveCannotBeImported" xml:space="preserve">
    <value>The '@{0}' directive specified in {1} file will not be imported. The directive must appear at the top of each Razor file</value>
  </data>
  <data name="PageDirective_Description" xml:space="preserve">
    <value>Mark the page as a routable component.</value>
  </data>
  <data name="PageDirective_RouteToken_Description" xml:space="preserve">
    <value>An optional route template for the component.</value>
  </data>
  <data name="PageDirective_RouteToken_Name" xml:space="preserve">
    <value>route template</value>
  </data>
  <data name="PreserveWhitespaceDirective_BooleanToken_Description" xml:space="preserve">
    <value>True if whitespace should be preserved, otherwise false.</value>
  </data>
  <data name="PreserveWhitespaceDirective_BooleanToken_Name" xml:space="preserve">
    <value>Preserve</value>
  </data>
  <data name="PreserveWhitespaceDirective_Description" xml:space="preserve">
    <value>Specifies whether or not whitespace should be preserved exactly. Defaults to false for better performance.</value>
  </data>
  <data name="RefTagHelper_Documentation" xml:space="preserve">
    <value>Populates the specified field or property with a reference to the element or component.</value>
  </data>
  <data name="RenderModeDirective_Documentation" xml:space="preserve">
    <value>Specifies the render mode for this component.</value>
  </data>
  <data name="RenderModeDirective_Token_Description" xml:space="preserve">
    <value>An identifier or explicit razor expression that resolves to a render mode that should be applied to this component.</value>
  </data>
  <data name="RenderModeDirective_Token_Name" xml:space="preserve">
    <value>Render mode</value>
  </data>
  <data name="RenderModeTagHelper_Documentation" xml:space="preserve">
    <value>Specifies the render mode for a component.</value>
  </data>
  <data name="SplatTagHelper_Documentation" xml:space="preserve">
    <value>Merges a collection of attributes into the current element or component.</value>
  </data>
  <data name="TypeParamDirective_Constraint_Description" xml:space="preserve">
    <value>The constraints applied to the type parameter.</value>
  </data>
  <data name="TypeParamDirective_Constraint_Name" xml:space="preserve">
    <value>type parameter constraint</value>
  </data>
  <data name="TypeParamDirective_Description" xml:space="preserve">
    <value>Declares a generic type parameter for the generated component class.</value>
  </data>
  <data name="TypeParamDirective_Token_Description" xml:space="preserve">
    <value>The name of the type parameter.</value>
  </data>
  <data name="TypeParamDirective_Token_Name" xml:space="preserve">
    <value>type parameter</value>
  </data>
</root>