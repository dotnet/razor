#pragma checksum "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "a66d420fecd4b03184392e5ffae1b5cbd3050be4e5c1a1d641eb271a35d9099d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Microsoft.AspNetCore.Razor.Language.IntegrationTests.TestFiles.TestFiles_IntegrationTests_CodeGenerationIntegrationTest_SingleLineControlFlowStatements_Runtime), @"default", @"/TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml")]
namespace Microsoft.AspNetCore.Razor.Language.IntegrationTests.TestFiles
{
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"a66d420fecd4b03184392e5ffae1b5cbd3050be4e5c1a1d641eb271a35d9099d", @"/TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml")]
    public class TestFiles_IntegrationTests_CodeGenerationIntegrationTest_SingleLineControlFlowStatements_Runtime
    {
        #pragma warning disable 1998
        public async System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<p>Before Text</p>\r\n\r\n");
#nullable restore
#line 3 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
  
    if (DateTime.Now.ToBinary() % 2 == 0) 

#line default
#line hidden
#nullable disable
#nullable restore
#line (4,45)-(4,77) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write("Current time is divisible by 2");

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
                                                                              else 

#line default
#line hidden
#nullable disable
#nullable restore
#line (4,85)-(4,97) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(DateTime.Now);

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
                                                                                                

    object Bar()
    {
        if (DateTime.Now.ToBinary() % 2 == 0)
            return "Current time is divisible by 2";
        else if (DateTime.Now.ToBinary() % 3 == 0)
            return "Current time is divisible by 3";
        else
            return DateTime.Now;
    }

    for (var i = 0; i < 10; i++)
        // Incrementing a number
        i--;

    

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
     foreach (var item in new[] {"hello"})
        

#line default
#line hidden
#nullable disable
#nullable restore
#line (21,10)-(21,14) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(item);

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
             

    do
        

#line default
#line hidden
#nullable disable
#nullable restore
#line (24,10)-(24,22) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(currentCount);

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
                     
    while (--currentCount >= 0);

    while (--currentCount <= 10)
        currentCount++;

    using (var reader = new System.IO.StreamReader("/something"))
        

#line default
#line hidden
#nullable disable
#nullable restore
#line (31,10)-(31,28) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(reader.ReadToEnd());

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
     lock (this)
        currentCount++;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
#nullable restore
#line 77 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 for (var i = 0; i < 10; i++)
    

#line default
#line hidden
#nullable disable
#nullable restore
#line (78,6)-(78,7) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(i);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 80 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 foreach (var item in new[] {"hello"})
    

#line default
#line hidden
#nullable disable
#nullable restore
#line (81,6)-(81,10) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(item);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 83 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 do
    

#line default
#line hidden
#nullable disable
#nullable restore
#line (84,6)-(84,18) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(currentCount);

#line default
#line hidden
#nullable disable
#nullable restore
#line 84 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
                 
while (--currentCount >= 0);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 87 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 while (--currentCount <= 10)
    currentCount++;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 90 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 using (var reader = new System.IO.StreamReader("/something"))
    // Reading the entire file
    

#line default
#line hidden
#nullable disable
#nullable restore
#line (92,6)-(92,24) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(reader.ReadToEnd());

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 94 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 lock (this)
    currentCount++;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 97 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 if (true) 

#line default
#line hidden
#nullable disable
#nullable restore
#line 97 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
            @GitHubUserName 

#line default
#line hidden
#nullable disable
            WriteLiteral("<p>Hello!</p>\r\n\r\n");
#nullable restore
#line 99 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
 if (true) 
    

#line default
#line hidden
#nullable disable
            WriteLiteral(" <p>The time is ");
#nullable restore
#line (100,24)-(100,36) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(DateTime.Now);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
            WriteLiteral("<p>After Text</p>");
        }
        #pragma warning restore 1998
#nullable restore
#line 37 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
            
    public string Foo()
    {
        var x = "";

        if (DateTime.Now.ToBinary() % 2 == 0)
            return "Current time is divisible by 2";
        else
            return "It isn't divisible by two";
        
        for (var i = 0; i < 10; i++)
            // Incrementing a number
            i--;

        foreach (var item in new[] {"hello"})
            

#line default
#line hidden
#nullable disable
#nullable restore
#line (52,14)-(52,18) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(item);

#line default
#line hidden
#nullable disable
#nullable restore
#line 52 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
                 

        do
            

#line default
#line hidden
#nullable disable
#nullable restore
#line (55,14)-(55,26) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(currentCount);

#line default
#line hidden
#nullable disable
#nullable restore
#line 55 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
                         
        while (--currentCount >= 0);

        while (--currentCount <= 10)
            currentCount++;

        using (var reader = new System.IO.StreamReader("/something"))
            

#line default
#line hidden
#nullable disable
#nullable restore
#line (62,14)-(62,32) 6 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
Write(reader.ReadToEnd());

#line default
#line hidden
#nullable disable
#nullable restore
#line 62 "TestFiles/IntegrationTests/CodeGenerationIntegrationTest/SingleLineControlFlowStatements.cshtml"
                               

        lock (this)
            currentCount++;
    }

    int currentCount = 0;

    public void IncrementCount()
    {
        if (true) currentCount++;
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
