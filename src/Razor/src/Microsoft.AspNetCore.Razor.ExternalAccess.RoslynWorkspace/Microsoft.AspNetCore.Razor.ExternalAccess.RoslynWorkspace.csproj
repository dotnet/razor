<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- needs to be compatible with NetVSCode as defined in Roslyn repo, eng/targets/TargetFrameworks.props -->
    <TargetFramework>$(DefaultNetCoreTargetFramework)</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>

    <!-- Ensure we run our custom target, below, to copy compiler project references -->
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" />
    <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.Common" />
    <PackageReference Include="Microsoft.Extensions.ObjectPool" />
    <PackageReference Include="Microsoft.Extensions.Logging" />
  </ItemGroup>

  <ItemGroup>
    <!-- Since we're including these DLLs in the package, we mark them as private assets so they're not also dependencies -->
    <ProjectReference Include="..\..\..\Compiler\Microsoft.CodeAnalysis.Razor.Compiler\src\Microsoft.CodeAnalysis.Razor.Compiler.csproj" PrivateAssets="all"/>
    <ProjectReference Include="..\Microsoft.AspNetCore.Razor.ProjectEngineHost\Microsoft.AspNetCore.Razor.ProjectEngineHost.csproj" PrivateAssets="all" />
  </ItemGroup>

  <!--
    Include the build output of project references in the package created. We need to do this because the compiler packages
    are published via a separate process to tooling, so anything that references this package will try to transitively pull
    in the compiler packages, but will be unable to find packages with the same version.

    This means we end up with the package for this project including the following additional DLLs:
      * Microsoft.CodeAnalysis.Razor.Compiler.dll
      * Microsoft.AspNetCore.Razor.ProjectEngineHost.dll
      * Microsoft.AspNetCore.Razor.Utilities.Shared.dll

    (and Microsoft.AspNetCore.Razor.ExternalAccess.RoslynWorkspace.dll obviously)
  -->
  <Target DependsOnTargets="ResolveReferences" Name="CopyProjectReferencesToPackage">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" />
    </ItemGroup>
  </Target>
</Project>
