#nullable enable
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FallbackCapabilitiesFilterResolver.Resolve(string! lspRequestMethodName) -> System.Func<Newtonsoft.Json.Linq.JToken!, bool>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider.AddOrUpdate(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, System.Uri! uri) -> void
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider.GetOrCreate(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer) -> System.Uri!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider.Remove(Microsoft.VisualStudio.Text.ITextBuffer! buffer) -> void
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider.TryGet(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, out System.Uri? uri) -> bool
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentChangeListener.Changed(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot? old, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot? new, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot? virtualOld, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot? virtualNew, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentChangeKind kind) -> void
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentFactory.Create(Microsoft.VisualStudio.Text.ITextBuffer! buffer) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync(int requiredHostDocumentVersion, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot! virtualDocument, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>!>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>!>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(string! method, string! contentType, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(string! method, string! contentType, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, string! languageServerName, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>?>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, string! languageServerName, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>?>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(string! method, string! languageServerName, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(string! method, string! languageServerName, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.TrackingLSPDocumentManager.TrackDocument(Microsoft.VisualStudio.Text.ITextBuffer! buffer) -> void
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.TrackingLSPDocumentManager.UntrackDocument(Microsoft.VisualStudio.Text.ITextBuffer! buffer) -> void
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.TrackingLSPDocumentManager.UpdateVirtualDocument<TVirtualDocument>(System.Uri! hostDocumentUri, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> void
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.CreateVirtualDocument(System.Uri! uri, Microsoft.VisualStudio.Text.ITextBuffer! textBuffer) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.HostDocumentContentTypeName.get -> string!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.LanguageContentType.get -> Microsoft.VisualStudio.Utilities.IContentType!
abstract Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.LanguageFileNameSuffix.get -> string!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFallbackCapabilitiesFilterResolver
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFallbackCapabilitiesFilterResolver.DefaultFallbackCapabilitiesFilterResolver() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFileUriProvider
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFileUriProvider.DefaultFileUriProvider(Microsoft.VisualStudio.Text.ITextDocumentFactoryService! textDocumentFactory) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFormattingOptionsProvider
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFormattingOptionsProvider.DefaultFormattingOptionsProvider(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentManager! documentManager, Microsoft.VisualStudio.Text.Editor.IIndentationManagerService! indentationManagerService) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.DefaultLSPDocument(System.Uri! uri, Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>! virtualDocuments) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentFactory
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentFactory.DefaultLSPDocumentFactory(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider! fileUriProvider, System.Collections.Generic.IEnumerable<System.Lazy<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactory!, Microsoft.VisualStudio.Utilities.IContentTypeMetadata!>!>! virtualBufferFactories) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.DefaultLSPDocumentManager(Microsoft.VisualStudio.Threading.JoinableTaskContext! joinableTaskContext, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider! fileUriProvider, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentFactory! documentFactory, System.Collections.Generic.IEnumerable<System.Lazy<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentChangeListener!, Microsoft.VisualStudio.Utilities.IContentTypeMetadata!>!>! documentManagerChangeListeners) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.DefaultLSPDocumentSynchronizer(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider! fileUriProvider, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentManager! documentManager) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.Synchronized.get -> bool
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.Synchronized.init -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.SynchronizedResult(bool Synchronized, TVirtualDocumentSnapshot! VirtualSnapshot) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.VirtualSnapshot.get -> TVirtualDocumentSnapshot!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.VirtualSnapshot.init -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TryReturnPossiblyFutureSnapshot<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>?
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer._synchronizationTimeout -> System.TimeSpan
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.DefaultLSPRequestInvoker(Microsoft.VisualStudio.LanguageServer.Client.ILanguageServiceBroker2! languageServiceBroker, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FallbackCapabilitiesFilterResolver! fallbackCapabilitiesFilterResolver) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.Extensions.TextBufferExtensions
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.Extensions.UriExtensions
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FallbackCapabilitiesFilterResolver
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FallbackCapabilitiesFilterResolver.FallbackCapabilitiesFilterResolver() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider.FileUriProvider() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InertContentType
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InertContentType.BaseTypes.get -> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Utilities.IContentType!>!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InertContentType.DisplayName.get -> string!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InertContentType.InertContentType() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InertContentType.IsOfType(string! type) -> bool
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InertContentType.TypeName.get -> string!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InviolableEditTag
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentChangeListener
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentChangeListener.LSPDocumentChangeListener() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentFactory
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentFactory.LSPDocumentFactory() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer.LSPDocumentSynchronizer() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPRequestInvoker.LSPRequestInvoker() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.DefaultInterceptorManager
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.DefaultInterceptorManager.DefaultInterceptorManager(System.Collections.Generic.IEnumerable<System.Lazy<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.MessageInterceptor!, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.IInterceptMethodMetadata!>!>! lazyInterceptors) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.IInterceptMethodMetadata
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.IInterceptMethodMetadata.ContentTypes.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.IInterceptMethodMetadata.InterceptMethods.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.InterceptMethodAttribute
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.InterceptMethodAttribute.InterceptMethodAttribute(string! interceptMethods) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.InterceptMethodAttribute.InterceptMethods.get -> string!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TResponseType>
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TResponseType>.LanguageClientName.get -> string!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TResponseType>.ReinvocationResponse(string! languageClientName, TResponseType? response) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TResponseType>.Response.get -> TResponseType?
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>.IsSuccess.get -> bool
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>.LanguageClient.get -> Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>.ReinvokeResponse() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>.ReinvokeResponse(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient! languageClient, TOut result) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>.Result.get -> TOut
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.TrackingLSPDocumentManager
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.TrackingLSPDocumentManager.TrackingLSPDocumentManager() -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.ContentTypeRegistry.get -> Microsoft.VisualStudio.Utilities.IContentTypeRegistryService!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.VirtualDocumentFactoryBase(Microsoft.VisualStudio.Utilities.IContentTypeRegistryService! contentTypeRegistry, Microsoft.VisualStudio.Text.ITextBufferFactoryService! textBufferFactory, Microsoft.VisualStudio.Text.ITextDocumentFactoryService! textDocumentFactory, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.FileUriProvider! filePathProvider) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.Delta.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.LineCountDelta.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.NewEnd.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.NewLength.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.NewPosition.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.NewSpan.get -> Microsoft.VisualStudio.Text.Span
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.NewText.get -> string!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.OldEnd.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.OldLength.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.OldPosition.get -> int
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.OldSpan.get -> Microsoft.VisualStudio.Text.Span
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.OldText.get -> string!
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.VisualStudioTextChange(int oldStart, int oldLength, string! newText) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.VisualStudioTextChange(Microsoft.VisualStudio.LanguageServer.Protocol.TextEdit! textEdit, Microsoft.VisualStudio.Text.ITextSnapshot! textSnapshot) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFallbackCapabilitiesFilterResolver.Resolve(string! lspRequestMethodName) -> System.Func<Newtonsoft.Json.Linq.JToken!, bool>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFileUriProvider.AddOrUpdate(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, System.Uri! uri) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFileUriProvider.GetOrCreate(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer) -> System.Uri!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFileUriProvider.Remove(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFileUriProvider.TryGet(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, out System.Uri? uri) -> bool
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultFormattingOptionsProvider.GetOptions(System.Uri! uri) -> Microsoft.VisualStudio.LanguageServer.Protocol.FormattingOptions?
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.CurrentSnapshot.get -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.TextBuffer.get -> Microsoft.VisualStudio.Text.ITextBuffer!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.UpdateVirtualDocument<TVirtualDocument>(System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.Uri.get -> System.Uri!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.Version.get -> int
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.VirtualDocuments.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentFactory.Create(Microsoft.VisualStudio.Text.ITextBuffer! buffer) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.TrackDocument(Microsoft.VisualStudio.Text.ITextBuffer! buffer) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.TryGetDocument(System.Uri! uri, out Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot? lspDocumentSnapshot) -> bool
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.UntrackDocument(Microsoft.VisualStudio.Text.ITextBuffer! buffer) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.UpdateVirtualDocument<TVirtualDocument>(System.Uri! hostDocumentUri, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.Changed(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot? old, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot? new, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot? virtualOld, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot? virtualNew, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentChangeKind kind) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync(int requiredHostDocumentVersion, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot! virtualDocument, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync(int requiredHostDocumentVersion, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot! virtualDocument, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(string! method, string! contentType, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnMultipleServersAsync<TIn, TOut>(string! method, string! contentType, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, string! languageServerName, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>?>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, string! method, string! languageServerName, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvocationResponse<TOut>?>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(string! method, string! languageServerName, System.Func<Newtonsoft.Json.Linq.JToken!, bool>! capabilitiesFilter, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.ReinvokeRequestOnServerAsync<TIn, TOut>(string! method, string! languageServerName, TIn parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.ReinvokeResponse<TOut>>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.DefaultInterceptorManager.HasInterceptor(string! methodName, string! contentType) -> bool
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.DefaultInterceptorManager.ProcessInterceptorsAsync(string! methodName, Newtonsoft.Json.Linq.JToken! message, string! contentType, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Newtonsoft.Json.Linq.JToken?>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.TryCreateFor(Microsoft.VisualStudio.Text.ITextBuffer! hostDocumentBuffer, out Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument? virtualDocument) -> bool
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.ToString() -> string!
static Microsoft.VisualStudio.LanguageServer.ContainedLanguage.Extensions.TextBufferExtensions.SetHostDocumentSyncVersion(this Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, long hostDocumentVersion) -> void
static Microsoft.VisualStudio.LanguageServer.ContainedLanguage.Extensions.TextBufferExtensions.TryGetHostDocumentSyncVersion(this Microsoft.VisualStudio.Text.ITextBuffer! textBuffer, out long hostDocumentVersion) -> bool
static Microsoft.VisualStudio.LanguageServer.ContainedLanguage.Extensions.UriExtensions.GetAbsoluteOrUNCPath(this System.Uri! uri) -> string!
static readonly Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InertContentType.Instance -> Microsoft.VisualStudio.Utilities.IContentType!
static readonly Microsoft.VisualStudio.LanguageServer.ContainedLanguage.InviolableEditTag.Instance -> Microsoft.VisualStudio.Text.IInviolableEditTag!
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync(int requiredHostDocumentVersion, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentSnapshot! virtualDocument, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.LanguageBufferProperties.get -> System.Collections.Generic.IReadOnlyDictionary<object!, object!>?