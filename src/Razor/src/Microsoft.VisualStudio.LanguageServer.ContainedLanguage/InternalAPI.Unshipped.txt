#nullable enable
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TryReturnPossiblyFutureSnapshot<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Uri? specificVirtualDocumentUri) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>?
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.SetVirtualDocuments(System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>! virtualDocuments) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.UpdateVirtualDocument<TVirtualDocument>(TVirtualDocument! virtualDocument, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentFactory.TryRefreshVirtualDocuments(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument! document) -> bool
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.RefreshVirtualDocuments() -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.UpdateVirtualDocument<TVirtualDocument>(System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument.SetVirtualDocuments(System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>! virtualDocuments) -> void
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentFactory.TryRefreshVirtualDocuments(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument! document) -> bool
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.TrackingLSPDocumentManager.UpdateVirtualDocument<TVirtualDocument>(System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> void
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactory.TryRefreshVirtualDocuments(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument! document, out System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>? newVirtualDocuments) -> bool
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.CreateVirtualDocumentTextBuffer(string! virtualLanguageFilePath, System.Uri! virtualLanguageUri) -> Microsoft.VisualStudio.Text.ITextBuffer!
