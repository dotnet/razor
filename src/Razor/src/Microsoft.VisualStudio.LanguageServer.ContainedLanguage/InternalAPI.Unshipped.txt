#nullable enable
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.Deconstruct(out bool Synchronized, out TVirtualDocumentSnapshot? VirtualSnapshot) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TryReturnPossiblyFutureSnapshot<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Uri? specificVirtualDocumentUri) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>?
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPRequestInvoker.DefaultLSPRequestInvoker(Microsoft.VisualStudio.LanguageServer.Client.ILanguageServiceBroker2! languageServiceBroker) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot.TryGetAllVirtualDocumentsAsArray<TVirtualDocument>(out System.Collections.Immutable.ImmutableArray<TVirtualDocument!> virtualDocuments) -> bool
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.DefaultInterceptorManager.DefaultInterceptorManager(System.Collections.Generic.IEnumerable<System.Lazy<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.MessageInterceptor!, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.IInterceptMethodMetadata!>!>! lazyInterceptors, System.Collections.Generic.IEnumerable<System.Lazy<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.GenericMessageInterceptor!, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.IInterceptMethodMetadata!>!>! lazyGenericInterceptors) -> void
Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VisualStudioTextChange.VisualStudioTextChange(int startLineNumber, int startCharacter, int endLineNumber, int endCharacter, Microsoft.VisualStudio.Text.ITextSnapshot! textSnapshot, string! newText) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.SetVirtualDocuments(System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>! virtualDocuments) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocument.UpdateVirtualDocument<TVirtualDocument>(TVirtualDocument! virtualDocument, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSnapshot!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentFactory.TryRefreshVirtualDocuments(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument! document) -> bool
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.RefreshVirtualDocuments() -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentManager.UpdateVirtualDocument<TVirtualDocument>(System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> void
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.Equals(object? obj) -> bool
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.GetHashCode() -> int
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.ToString() -> string!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
override Microsoft.VisualStudio.LanguageServer.ContainedLanguage.MessageInterception.DefaultInterceptorManager.ProcessGenericInterceptorsAsync<TJsonToken>(string! methodName, TJsonToken message, string! contentType, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TJsonToken?>!
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.EqualityContract.get -> System.Type!
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument.SetVirtualDocuments(System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>! virtualDocuments) -> void
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentFactory.TryRefreshVirtualDocuments(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument! document) -> bool
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocumentSynchronizer.TrySynchronizeVirtualDocumentAsync<TVirtualDocumentSnapshot>(int requiredHostDocumentVersion, System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, bool rejectOnNewerParallelRequest, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot!>!>!
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.TrackingLSPDocumentManager.UpdateVirtualDocument<TVirtualDocument>(System.Uri! hostDocumentUri, System.Uri! virtualDocumentUri, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.Text.ITextChange!>! changes, int hostDocumentVersion, object? state) -> void
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactory.TryRefreshVirtualDocuments(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.LSPDocument! document, out System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocument!>? newVirtualDocuments) -> bool
virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.VirtualDocumentFactoryBase.CreateVirtualDocumentTextBuffer(string! virtualLanguageFilePath, System.Uri! virtualLanguageUri) -> Microsoft.VisualStudio.Text.ITextBuffer!
~Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.SynchronizedResult(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>! original) -> void
~static Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.operator !=(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>? left, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>? right) -> bool
~static Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.operator ==(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>? left, Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>? right) -> bool
~virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.<Clone>$() -> Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>!
~virtual Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>.Equals(Microsoft.VisualStudio.LanguageServer.ContainedLanguage.DefaultLSPDocumentSynchronizer.SynchronizedResult<TVirtualDocumentSnapshot>? other) -> bool
