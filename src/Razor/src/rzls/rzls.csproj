<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(DefaultNetCoreTargetFramework)</TargetFramework>
    <OutputType>Exe</OutputType>
    <Description>Razor is a markup syntax for adding server-side logic to web pages. This package
      contains a Razor language server.</Description>
    <RootNamespace>Microsoft.AspNetCore.Razor.LanguageServer</RootNamespace>
    <EnableApiCheck>false</EnableApiCheck>
    <IsShippingPackage>true</IsShippingPackage>
    <RollForward>LatestMajor</RollForward>
    <!--
        Build a nuget package for this project.  This is not consumed as a standard NuGet package; it just
    contains
        the server executables that we need to ship inside the extension vsix.  The extension will download
    this and extract the
        executables when it builds.  NuGet just happens to be a convenient way to share build artifacts.
    -->
    <IsPackable>true</IsPackable>
    <!-- Our outer Pack task (defined in PackAllRids.targets) invokes Pack passing in a
    PackRuntimeIdentifier to produce one package per RID; from that we can set everything else. -->
    <RuntimeIdentifier Condition="'$(PackRuntimeIdentifier)' != '' and '$(PackRuntimeIdentifier)' != 'neutral'">$(PackRuntimeIdentifier)</RuntimeIdentifier>

    <!--
        By default since this is an Exe project and we build on windows, we'll get a .exe as output from a
    platform neutral build.
        However, we really only want an executable if we're building for a specific platform (aka have a
    runtime identifier).

        So if we don't have a platform, tell the build not to output a .exe file because we're building
    platform neutral bits.
    -->
    <UseAppHost Condition="'$(RuntimeIdentifier)' == ''">false</UseAppHost>

    <PackageId>$(AssemblyName).$(PackRuntimeIdentifier)</PackageId>

    <!--
        Publish the platform specific executables before any of the pack related targets run.
        This is important to ensure that the content files exist on the project before nuget looks for
    them.

        Note that BeforeTargets="Pack" is not enough, as the determination of what to include in the
    package runs
        before the actual "Pack" target runs.
    -->
    <BeforePack>PackPublishContent;$(BeforePack)</BeforePack>

    <!--
      NU5100: Since this is not a standard nuget package and is only consumed by the extension build, we
    don't care if the folder structure doesn't match what nuget expects.
      NETSDK1206: Until we move to a newer release of the SQLitePCLRaw packages (2.1.6+) that removes the
    libs for alpine RIDs, we have to ignore the SDK warning about distribution specific RIDs.
    -->
    <NoWarn>$(NoWarn);NU5100;NETSDK1206</NoWarn>

    <!-- Publishing settings -->
    <SelfContained>false</SelfContained>
    <PublishDir Condition="'$(RuntimeIdentifier)' != ''">$(ArtifactsDir)LanguageServer\$(Configuration)\$(TargetFramework)\$(RuntimeIdentifier)</PublishDir>
    <PublishDir Condition="'$(RuntimeIdentifier)' == ''">$(ArtifactsDir)LanguageServer\$(Configuration)\$(TargetFramework)\neutral</PublishDir>

    <!-- List of runtime identifiers that we want to publish an executable for. -->
    <!-- When building a VMR vertical, we don't need to pack everything. Just pack the passed in
    TargetRid.
         TargetRid is provided to razor via the build arguments passed in the VMR orchestrator's repo
    project. We copy roslyn here:
         https://github.com/dotnet/dotnet/blob/main/repo-projects/roslyn.proj. For definitions of the
    TargetRid
         and other common properties, see
    https://github.com/dotnet/arcade/blob/main/Documentation/UnifiedBuild/Unified-Build-Controls.md -->
    <RuntimeIdentifiers Condition="'$(TargetRid)' != '' and '$(DotNetBuildSourceOnly)' != 'true'">$(TargetRid)</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="'$(TargetRid)' == ''">win-x64;win-arm64;linux-x64;linux-arm64;linux-musl-x64;linux-musl-arm64;osx-x64;osx-arm64</RuntimeIdentifiers>
    <!-- Publish ready to run executables when we're publishing platform specific executables. -->
    <PublishReadyToRun Condition="'$(RuntimeIdentifier)' != '' AND '$(Configuration)' == 'Release' ">true</PublishReadyToRun>
  </PropertyGroup>

  <!-- When we are packing each RID, we set PackRuntimeIdentifier; by default this will also get
  passed to the builds of all ResolveProjectReferences
       which causes a lot of duplicate building. This removes it. -->
  <ItemDefinitionGroup>
    <ProjectReference>
      <GlobalPropertiesToRemove>PackRuntimeIdentifier</GlobalPropertiesToRemove>
    </ProjectReference>
  </ItemDefinitionGroup>

  <ItemGroup>
    <ProjectReference
      Include="..\Microsoft.AspNetCore.Razor.LanguageServer\Microsoft.AspNetCore.Razor.LanguageServer.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="$(RepositoryRoot)NOTICE.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>

    <Content Include=".\Targets\**\*.targets">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>

    <Content Include=".\Targets\Rules\*.xaml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <Target Name="PackPublishContent" DependsOnTargets="Publish">
    <!-- We have to add the content files in a target (and not just defined in a normal item group) since they are produced by the prior step and won't exist at evaluation time. -->
    <ItemGroup>
      <Content Include="$(PublishDir)/**/*.*">
        <Pack>true</Pack>
        <PackagePath>content\LanguageServer\$(PackRuntimeIdentifier)</PackagePath>
        <CopyToOutput>false</CopyToOutput>
        <BuildAction>None</BuildAction>
      </Content>
    </ItemGroup>
  </Target>

  <!-- If we don't have a PackRuntimeIdentifier set, that means pack has been invoked on the project directly, with say dotnet pack. In this case
       we'll replace the Pack target with one that instead recursively invokes pack for each runtime identifier. We define those targets
       in a separate .targets file, since we can't say to MSBuild "only consider our Pack target as a definition based on this condition" any other way. -->
  <Import Project="PublishAllRids.targets" Condition="'$(PackRuntimeIdentifier)' == ''" />
</Project>
