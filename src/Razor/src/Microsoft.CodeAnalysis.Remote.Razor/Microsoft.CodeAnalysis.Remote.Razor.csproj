<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Description>Razor is a markup syntax for adding server-side logic to web pages. This package contains the Razor design-time infrastructure.</Description>
    <TargetFramework>netstandard2.0</TargetFramework>
    <EnableApiCheck>false</EnableApiCheck>
    <IsShippingPackage>false</IsShippingPackage>
    <ExcludeFromSourceBuild>true</ExcludeFromSourceBuild>

    <!--
      Razor.ServiceHub won't always match the other packages Roslyn ships. This is ignorable.

      PrivateAssets keeps it from being viral.
    -->
    <NoWarn>$(NoWarn);NU1608</NoWarn>

    <!-- Don't warn about restoring ServiceHub assets for .NET Framework when we're compiling against netstandard2.0 -->
    <NoWarn>$(NoWarn);NU1701</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Microsoft.CodeAnalysis.Razor.Workspaces\Microsoft.CodeAnalysis.Razor.Workspaces.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Razor.Language" Version="$(MicrosoftAspNetCoreRazorLanguagePackageVersion)" />
    <PackageReference Include="Nerdbank.Streams" Version="$(NerdbankStreamsPackageVersion)" />

    <!--
      Microsoft.CodeAnalysis.Remote.ServiceHub brings in a transitive dependency to StreamJsonRpc of 2.7.X. We found that in practice this would flakily break our
      CI builds here: https://github.com/dotnet/razor-tooling/issues/4327
      Now we aren't sure why this exposes a "flaky" issue; however, to workaround the break we pin StreamJsonRpc.
    -->
    <PackageReference Include="Microsoft.CodeAnalysis.Remote.ServiceHub" Version="$(Tooling_MicrosoftCodeAnalysisRemoteServiceHubPackageVersion)" PrivateAssets="All" />
    <PackageReference Include="StreamJsonRpc" Version="$(StreamJsonRpcPackageVersion)" />
  </ItemGroup>

</Project>
