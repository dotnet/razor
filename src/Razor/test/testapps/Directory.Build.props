<Project>
  <Import Project="Before.Directory.Build.props" Condition="Exists('Before.Directory.Build.props')" />

  <PropertyGroup>
    <SolutionRoot Condition="'$(SolutionRoot)' == ''">$(MSBuildThisFileDirectory)..\..\</SolutionRoot>
    <SolutionRoot>$([MSBuild]::EnsureTrailingSlash('$(SolutionRoot)'))</SolutionRoot>
    <RepositoryRoot>$(SolutionRoot)..\..\</RepositoryRoot>

    <!--
      In the case that a user is building a sample directly the MicrosoftNetCompilersToolsetPackagerVersion will not be provided.
      We'll fall back to whatever the current SDK provides in regards to Roslyn's Microsoft.Net.Compilers.Toolset.
    -->
    <BuildingTestAppsIndependently>false</BuildingTestAppsIndependently>
    <BuildingTestAppsIndependently Condition="'$(MicrosoftNetCompilersToolsetPackageVersion)' == ''">true</BuildingTestAppsIndependently>
  </PropertyGroup>

  <!-- Retarget tests to use the copy of the Sdk from aspnetcore -->
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Sdk.Razor"
      Version="$(MicrosoftNETSdkRazorPackageVersion)"
      PrivateAssets="All"
      IsImplicitlyDefined="true" />
  </ItemGroup>

  <Import Project="$(SolutionRoot)..\..\eng\Versions.props" />

  <PropertyGroup>
    <!-- Working around an issue in XDT transforms -->
    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>

    <!-- Working around https://github.com/NuGet/Home/issues/8467 -->
    <NoWarn>$(NoWarn);NU5131</NoWarn>
  </PropertyGroup>

  <!-- Don't use the server when building in place. This locks up rzc.dll -->
  <PropertyGroup Condition="'$(BinariesRoot)'==''">
    <UseRazorBuildServer>false</UseRazorBuildServer>
  </PropertyGroup>

  <ItemGroup>
    <!-- Have the SDK treat the MvcShim as an MVC assembly -->
    <_MvcAssemblyName Include="Microsoft.AspNetCore.Razor.Test.MvcShim.ClassLib" />
  </ItemGroup>

  <Import Project="After.Directory.Build.props" Condition="Exists('After.Directory.Build.props')" />

</Project>
