<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(NetVSAndVSCode);$(NetFxVS)</TargetFrameworks>

    <!-- To generate baselines, run tests with /p:GenerateBaselines=true -->
    <DefineConstants Condition="'$(GenerateBaselines)'=='true'">$(DefineConstants);GENERATE_BASELINES</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <None Include="xunit.runner.json" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\Microsoft.AspNetCore.Razor.LanguageServer\Microsoft.AspNetCore.Razor.LanguageServer.csproj" />
    <ProjectReference Include="..\Microsoft.AspNetCore.Razor.Test.Common.Tooling\Microsoft.AspNetCore.Razor.Test.Common.Tooling.csproj" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="Semantic\TestFiles\**\*" />
  </ItemGroup>

  <ItemGroup>
    <!--
      Razor and Roslyn both use CLaSP as the basis for their language servers, but CLaSP is a source package
      which means when we reference Roslyn's server to get the LSP protocol types (which we have a restricted
      IVT to) we get ambiguous type errors for everything in CLaSP. To fix this we reference Roslyn with an
      alias, and then have a global using for the LSP protocol types only.
    -->
    <PackageReference Include="Microsoft.CodeAnalysis.LanguageServer.Protocol" Aliases="RLSP" />
  </ItemGroup>
  
</Project>
