#
# See https://docs.microsoft.com/azure/devops/pipelines/yaml-schema for reference.
#

variables:
- name: Build.Repository.Clean
  value: true
- name: _TeamName
  value: AspNetCore
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: Codeql.Enabled
  value: true
- ${{ if ne(variables['System.TeamProject'], 'public') }}:
  - group: DotNetBuilds storage account read tokens
  - name: _InternalRuntimeDownloadArgs
    value: /p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal
            /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64)
- ${{ if eq(variables['System.TeamProject'], 'public') }}:
  - name: _InternalRuntimeDownloadArgs
    value: ''

trigger:
  batch: true
  branches:
    include:
      - main
      - main-vs-deps
      - release/*
      - internal/release/3.*

pr:
  autoCancel: true
  branches:
    include:
      - '*'

stages:
- stage: build
  displayName: Build
  jobs:
  - ${{ if and(and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
    - template: /eng/common/templates/job/onelocbuild.yml
      parameters:
        LclSource: lclFilesfromPackage
        LclPackageId: 'LCL-JUNO-PROD-RAZORTOOL'
        MirrorRepo: razor

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: false
      enablePublishTestResults: false
      enablePublishUsingPipelines: false
      jobs:
      # Code check
      - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        - job: Code_check
          displayName: Code check
          pool:
            ${{ if eq(variables['System.TeamProject'], 'public') }}:
              name: NetCore-Public
              demands: ImageOverride -equals windows.vs2022preview.amd64.open
            ${{ if ne(variables['System.TeamProject'], 'public') }}:
              name: NetCore1ESPool-Internal
              demands: ImageOverride -equals windows.vs2022preview.amd64
          steps:
          - task: NodeTool@0
            displayName: Install Node 10.x
            inputs:
              versionSpec: 10.x
          - task: NuGetCommand@2
            displayName: 'Clear NuGet caches'
            condition: succeeded()
            inputs:
              command: custom
              arguments: 'locals all -clear'
          - ${{ if ne(variables['System.TeamProject'], 'public') }}:
            - task: PowerShell@2
              displayName: Setup Private Feeds Credentials
              inputs:
                filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
                arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
              env:
                Token: $(dn-bot-dnceng-artifact-feeds-rw)
          - powershell: ./restore.cmd -msbuildEngine dotnet -ci $(_InternalRuntimeDownloadArgs); ./eng/scripts/CodeCheck.ps1 -ci
            displayName: Run eng/scripts/CodeCheck.ps1


  # Three jobs for each of the three OSes we want to run on
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      enableTelemetry: true
      helixRepo: dotnet/razor
      helixType: build.product/
      # enableMicrobuild can't be read from a user-defined variable (Azure DevOps limitation)
      ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        enableMicrobuild: true
        enablePublishUsingPipelines: true

      jobs:
      - job: Windows
        timeoutInMinutes: 120
        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: NetCore-Public
            demands: ImageOverride -equals windows.vs2022preview.scout.amd64.open
          ${{ if ne(variables['System.TeamProject'], 'public') }}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals windows.vs2022preview.amd64
        strategy:
          matrix:
            ${{ if eq(variables['System.TeamProject'], 'public') }}:
              debug:
                _BuildConfig: Debug
                _PublishArgs: ''
              release:
                _BuildConfig: Release
                _PublishArgs: ''
            ${{ if ne(variables['System.TeamProject'], 'public') }}:
              release:
                _BuildConfig: Release
                ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
                  _PublishArgs: ''
                ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
                  _PublishArgs: /p:DotNetPublishUsingPipelines=true

        variables:
        - _BuildArgs: ''
        - XUNIT_LOGS: '$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)'
        - __VSNeverShowWhatsNew: 1

        # Variables for internal Official builds
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - _SignType: real
          - _BuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
              /p:OfficialBuildId=$(Build.BuildNumber)
              /p:ManifestBuildBranch=$(Build.SourceBranchName)
              /p:ManifestBuildNumber=$(Build.BuildNumber)
              /p:VisualStudioDropName=Products/dotnet/razor-tooling/$(Build.SourceBranchName)/$(Build.BuildNumber)
              /p:GenerateSbom=true

        steps:
        - task: NodeTool@0
          displayName: Install Node 10.x
          inputs:
            versionSpec: 10.x

        - powershell: npm install -g yarn
          displayName: Install yarn
          condition: succeeded()

        - task: NuGetCommand@2
          displayName: 'Clear NuGet caches'
          condition: succeeded()
          inputs:
            command: custom
            arguments: 'locals all -clear'

        - ${{ if ne(variables['System.TeamProject'], 'public') }}:
          - template: /eng/restore-internal-tools.yml

        - powershell: ./eng/scripts/InstallProcDump.ps1
          displayName: Install ProcDump

        - powershell: ./eng/scripts/StartDumpCollectionForHangingBuilds.ps1
            $(ProcDumpPath)procdump.exe artifacts/log/$(_BuildConfig)
            (Get-Date).AddMinutes(60)
            devenv, xunit.console, xunit.console.x86
          displayName: Start background dump collection

        - ${{ if ne(variables['System.TeamProject'], 'public') }}:
          - task: PowerShell@2
            displayName: Setup Private Feeds Credentials
            inputs:
              filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
              arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
            env:
              Token: $(dn-bot-dnceng-artifact-feeds-rw)

        - script: eng\CIBuild.cmd
            -restore
            -build
            -sign
            -pack
            -publish
            -configuration $(_BuildConfig)
            -msbuildEngine dotnet
            -prepareMachine
            $(_BuildArgs)
            $(_PublishArgs)
            $(_InternalRuntimeDownloadArgs)
          name: Build
          displayName: Build
          condition: succeeded()

        - task: PublishBuildArtifacts@1
          displayName: Upload Build BinLog
          condition: always()
          continueOnError: true
          inputs:
              pathtoPublish: artifacts/log/$(_BuildConfig)/Build.binlog
              artifactName: $(Agent.Os)_$(Agent.JobName) BuildBinLog
              artifactType: Container
              parallel: true

        - script: eng\cibuild.cmd
            -configuration $(_BuildConfig)
            -msbuildEngine vs
            -prepareMachine
            -restore
            -build
            -pack
            -sign
            /p:BuildVsix=true
            /p:BuildProjectReferences=false
            $(_BuildArgs)
            $(_PublishArgs)
            $(_InternalRuntimeDownloadArgs)
          name: Build_Vsix
          displayName: Build and Deploy Vsix
          condition: succeeded()

        - task: PublishBuildArtifacts@1
          displayName: Upload Build VSIX BinLog
          condition: always()
          continueOnError: true
          inputs:
              pathtoPublish: artifacts/log/$(_BuildConfig)/Build.binlog
              artifactName: $(Agent.Os)_$(Agent.JobName) BuildVSIXBinLog
              artifactType: Container
              parallel: true

        - powershell: eng\SetupVSHive.ps1
          displayName: Setup VS Hive

        - script: eng\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            -test
            -integrationTest
            /p:BuildProjectReferences=false
          name: Run_Tests
          displayName: Run Unit and Integration tests
          condition: succeeded()

        - task: PublishBuildArtifacts@1
          displayName: Upload Run tests BinLog
          condition: always()
          continueOnError: true
          inputs:
              pathtoPublish: artifacts/log/$(_BuildConfig)/Build.binlog
              artifactName: $(Agent.Os)_$(Agent.JobName) RunTestsBinLog
              artifactType: Container
              parallel: true

        - powershell: ./eng/scripts/FinishDumpCollectionForHangingBuilds.ps1 artifacts/log/$(_BuildConfig)
          displayName: Finish background dump collection
          continueOnError: true
          condition: always()

        - powershell: |
            $version = $(node -p "require('./package.json').version" | Out-String).Trim()
            yarn install
            md $(Build.SourcesDirectory)/artifacts/packages/VSCode/$(_BuildConfig)/ -ea 0
            npx vsce@1.103.1 package -o $(Build.SourcesDirectory)/artifacts/packages/VSCode/$(_BuildConfig)/blazorwasm-companion-$version.vsix
          displayName: Produce Blazor WASM Debugging Extension VSIX
          workingDirectory: $(Build.SourcesDirectory)/src/Razor/src/Microsoft.AspNetCore.Razor.VSCode.BlazorWasmDebuggingExtension
          failOnStderr: true
          condition: and(succeeded(), eq(variables['_BuildConfig'], 'Release'))

        - task: PublishBuildArtifacts@1
          displayName: Upload Test Results
          condition: always()
          continueOnError: true
          inputs:
            pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
            artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
            artifactType: Container
            parallel: true

        # - task: PublishTestResults@2
        #   displayName: Publish VSCode Test Results
        #   inputs:
        #     testResultsFormat: 'JUnit'
        #     testResultsFiles: '*.xml'
        #     searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
        #   continueOnError: true
        #   condition: always()

        - task: PublishBuildArtifacts@1
          displayName: Publish VSIX Artifacts
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
            PublishLocation: Container
            ArtifactName: VSIX_$(Agent.Os)_$(_BuildConfig)
          continueOnError: true
          condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))

        - task: PublishBuildArtifacts@1
          displayName: Publish VS for Mac Artifacts
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/MPack/$(_BuildConfig)'
            PublishLocation: Container
            ArtifactName: MPack_$(Agent.Os)_$(_BuildConfig)
          continueOnError: true
          condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))

        - task: PublishBuildArtifacts@1
          displayName: Publish package artifacts
          inputs:
            PathtoPublish: $(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)
            PublishLocation: Container
            ArtifactName: Packages_$(Agent.Os)_$(_BuildConfig)
          continueOnError: true
          condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))

        - task: PublishBuildArtifacts@1
          displayName: Publish VS Code extension artifacts
          inputs:
            PathtoPublish: $(Build.SourcesDirectory)/artifacts/packages/VSCode/$(_BuildConfig)
            PublishLocation: Container
            ArtifactName: BlazorWasmDebuggingExtension
          continueOnError: true
          condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))

      - ${{ if eq(variables['System.TeamProject'], 'public') }}:
        - job: macOS
          pool:
            vmImage: macOS-11
          strategy:
            matrix:
              debug:
                _BuildConfig: Debug
              release:
                _BuildConfig: Release
          steps:
          - task: NodeTool@0
            displayName: Install Node 10.x
            inputs:
              versionSpec: 10.x
          - ${{ if ne(variables['System.TeamProject'], 'public') }}:
            - task: Bash@3
              displayName: Setup Private Feeds Credentials
              inputs:
                filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
                arguments: $(Build.SourcesDirectory)/NuGet.config $Token
              env:
                Token: $(dn-bot-dnceng-artifact-feeds-rw)
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              $(_InternalRuntimeDownloadArgs)
            name: Build
            displayName: Build
            condition: succeeded()
          - task: PublishBuildArtifacts@1
            displayName: Upload TestResults
            condition: always()
            continueOnError: true
            inputs:
              pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
              artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
              artifactType: Container
              parallel: true

        - job: Linux
          container:
            image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7
            options: --init # This ensures all the stray defunct processes are reaped.
          pool:
            ${{ if eq(variables['System.TeamProject'], 'public') }}:
              vmImage: ubuntu-latest
            ${{ if eq(variables['System.TeamProject'], 'internal') }}:
              name: NetCore1ESPool-Internal
              demands: ImageOverride -equals Build.Ubuntu.1804.Amd64

          variables:
          - LC_ALL: 'en_US.UTF-8'
          - LANG: 'en_US.UTF-8'
          - LANGUAGE: 'en_US.UTF-8'
          strategy:
            matrix:
              debug:
                _BuildConfig: Debug
              release:
                _BuildConfig: Release
          steps:
          - task: NodeTool@0
            displayName: Install Node 10.x
            inputs:
              versionSpec: 10.x
          - ${{ if ne(variables['System.TeamProject'], 'public') }}:
            - task: Bash@3
              displayName: Setup Private Feeds Credentials
              inputs:
                filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
                arguments: $(Build.SourcesDirectory)/NuGet.config $Token
              env:
                Token: $(dn-bot-dnceng-artifact-feeds-rw)
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              $(_InternalRuntimeDownloadArgs)
            name: Build
            displayName: Build
            condition: succeeded()
          - task: PublishBuildArtifacts@1
            displayName: Upload Test Results
            condition: always()
            continueOnError: true
            inputs:
              pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
              artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
              artifactType: Container
              parallel: true

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - stage: publishBuildAssets
    displayName: Publish to Build Asset Registry
    dependsOn: build
    jobs:
      # Publish to Build Asset Registry
      - template: /eng/common/templates/job/publish-build-assets.yml
        parameters:
          publishUsingPipelines: true
          pool:
            name: NetCore1ESPool-Svc-Internal
            demands: ImageOverride -equals windows.vs2022.amd64

  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      validateDependsOn:
        - publishBuildAssets
      publishingInfraVersion: 3
      enableSigningValidation: false
      enableNugetValidation: false
      SDLValidationParameters:
        enable: true
        params: >-
          -SourceToolsList @("policheck","credscan")
          -TsaInstanceURL $(_TsaInstanceURL)
          -TsaProjectName $(_TsaProjectName)
          -TsaNotificationEmail $(_TsaNotificationEmail)
          -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
          -TsaBugAreaPath $(_TsaBugAreaPath)
          -TsaIterationPath $(_TsaIterationPath)
          -TsaRepositoryName "Razor-Tooling"
          -TsaCodebaseName "Razor-Tooling"
          -TsaPublish $True
